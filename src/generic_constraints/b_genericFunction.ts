/**
 * Lesson : Generic Functions.
 * 
 * ex
 * 
 * function lastNum<T>(arr: T[], count: number) {
  return arr.slice(arr.length - count)
  }
 */

const lastNum = <T>(arr:T[],count:number) => {
  //<T> ‡∏Ñ‡∏∑‡∏≠ lastNum<T> type parameter / T ‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô
  //(arr:T[],count:number) ‡∏Ñ‡∏∑‡∏≠ (parameter arr : ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà lastNum ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Array ,count:number)

  return arr.slice(arr.length - count)
  //parameter arr.(arr.length(‡πÄ‡∏•‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á Array) - count)

  //slice(start?: number | undefined, end?: number | undefined)
}

//number[]
//console.log(lastNum([1, 2, 3, 4, 5, 6, 7], 3));
//[ 5, 6, 7 ] ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ count


//string[]
//console.log(lastNum(["üçï", "üçâ", "ü•ù", "üçß", "ü•©"], 3));
